r_VPP_cormat <- VPP_cormat$r # Matrix of correlation coeficients
p_VPP_cormat <- VPP_cormat$P # Matrix of unadjusted p-values
# adjust p-values of correlation matrix with p.adjust
p_VPP_cormat[lower.tri(p_VPP_cormat)] <- NA # Isolate half of matrix
p_unadjust_VPP_vector <- as.vector(p_VPP_cormat) # Transpose matrix to vector
p_adjust_VPP_vector <- p.adjust(p_unadjust_VPP_vector, method = "BH") # apply BH adjustment to vector (Benjamini & Hochberg (1995) / FDR)
p_VPP_ADJ <- matrix(p_adjust_VPP_vector,nrow = 8,ncol = 8) # Transpose adjusted vector to matrix
colnames(p_VPP_ADJ) <- c("A_mean", "alpha_mean", "lambda_mean", "epP_mean", "epN_mean", "K_mean", "w_mean", "cons_mean") #name columns
rownames(p_VPP_ADJ) <- c("A_mean", "alpha_mean", "lambda_mean", "epP_mean", "epN_mean", "K_mean", "w_mean", "cons_mean") #name rows
# Print matrix with rounded r values
round(r_VPP_cormat, 2)
# Print matrix with adjusted p-valyes
round(p_VPP_ADJ, 4)
# Note, using corr.test to adjust for multiple comparisons provides the same results, but p.adjust gives more decimal places
VPP_rcorr_BHadjust <- corr.test(HDT_VPP_matrix, method = "spearman", adjust = "fdr")
print(VPP_rcorr_BHadjust, short = T)
HDT_VPP_Behavior_matrix <- as.matrix(HDT_plus[c("A_mean", "alpha_mean", "lambda_mean", "epP_mean", "epN_mean", "K_mean", "w_mean", "cons_mean", "netscore","WS_nonetloss","LS_netloss")])
# create matrix with VPP parameters and behavioral metrics
HDT_VPP_Behavior_matrix <- as.matrix(HDT_plus[c("A_mean", "alpha_mean", "lambda_mean", "epP_mean", "epN_mean", "K_mean", "w_mean", "cons_mean", "netscore","WS_nonetloss","LS_netloss")])
# run Spearman rank correlations between VPP parameters and behavioral metrics
VPP_Behavior_cormat<-rcorr(HDT_VPP_Behavior_matrix, type=c("spearman"))
r_VPP_Behavior_cormat <- VPP_Behavior_cormat$r # Matrix of correlation coefficients
p_VPP_Behavior_cormat <- VPP_Behavior_cormat$P # Matrix of unadjusted p-values
# Reduce correlation matrix to dataframe with 1 row for each behavioral metric
r_VPP_Behavior_df <- as.data.frame(r_VPP_Behavior_cormat)[(c(9:11)),-c(9:11),]
p_VPP_Behavior_df <- as.data.frame(p_VPP_Behavior_cormat)[(c(9:11)),-c(9:11),]
# Make empty matrix for adjusted p-values
p_VPP_Behavior_ADJ = matrix(nrow = 3, ncol = 8)
rownames(p_VPP_Behavior_ADJ) <- c(rownames(p_VPP_Behavior_df))
colnames(p_VPP_Behavior_ADJ) <- c(colnames(p_VPP_Behavior_df))
#Adjust for multiple comparisons within a behavioral metric (correcting for 8 tests) using BH
BehNameVect <- rownames(r_VPP_Behavior_df)
for (BehName in BehNameVect) {
# add vector of adjusted p-values to matrix
adj <- p.adjust(p_VPP_Behavior_df[BehName,], "BH", n = length(p_VPP_Behavior_df))
p_VPP_Behavior_ADJ[BehName,] <- adj
}
# Print matrix with r-values
round(r_VPP_Behavior_df, 2)
# Print matrix with unadjusted p-values
round(p_VPP_Behavior_df, 4)
# Print matrix with adjusted p-valuys
round(p_VPP_Behavior_ADJ, 4)
#Use rcorr (Hmisc package) and dataframe to create Spearman rank correlation matrices of r and p values
library(Hmisc)
library(lme4)
library(lmerTest)
HDT_DM_PC_matrix <- as.matrix(HDT_plus[c("A_mean", "alpha_mean", "lambda_mean", "epP_mean", "epN_mean", "K_mean", "w_mean", "cons_mean", "WS_nonetloss","LS_netloss","netscore", "age_VB", "Child_BMI_zscore","VB_FF_pre_SLTM")])
correlation_matrix_dm<-rcorr(HDT_DM_PC_matrix, type=c("spearman"))
r_cormat_dm <- correlation_matrix_dm$r # Matrix of correlation coefficients
p_cormat_unadjust_dm <- correlation_matrix_dm$P # Matrix of unadjusted p-values
DM_by_parChar_estimates <- as.data.frame(r_cormat_dm)[(c(1:11)),-c(1:11),]
DM_by_parChar_Pval_unadjusted <- as.data.frame(p_cormat_unadjust_dm)[(c(1:11)),-c(1:11),]
ParmNameVect <- rownames(DM_by_parChar_Pval_unadjusted)
for (paramName in ParmNameVect) {
Sex_test <- wilcox.test(HDT_plus[,paramName] ~ HDT_plus$Child_Sex, paired = FALSE) #when paired = false, this runs a Wilcoxon rank sum test, equivalent to Mann-Whitney test
DM_by_parChar_estimates[paramName, "Child_Sex"] <- Sex_test$statistic[[1]]
DM_by_parChar_Pval_unadjusted[paramName, "Child_Sex"] <- Sex_test$p.value
MatEd_test <- kruskal.test(HDT_plus[,paramName] ~ HDT_plus$Mom_edu_recode)
DM_by_parChar_estimates[paramName, "Mom_edu_recode"] <- MatEd_test$statistic[[1]]
DM_by_parChar_Pval_unadjusted[paramName, "Mom_edu_recode"] <- MatEd_test$p.value
Income_test <- kruskal.test(HDT_plus[,paramName] ~ HDT_plus$Income2)
DM_by_parChar_estimates[paramName, "Income2"] <- Income_test$statistic[[1]]
DM_by_parChar_Pval_unadjusted[paramName, "Income2"] <- Income_test$p.value
}
# Make empty matrix for adjusted p-values
DM_by_parChar_Pval_ADJ = matrix(nrow = 11, ncol = 7)
rownames(DM_by_parChar_Pval_ADJ) <- c(rownames(DM_by_parChar_Pval_unadjusted))
colnames(DM_by_parChar_Pval_ADJ) <- c(colnames(DM_by_parChar_Pval_unadjusted))
DM_by_parChar_Pval_ADJ = matrix(nrow = 11, ncol = 6)
rownames(DM_by_parChar_Pval_ADJ) <- c(rownames(DM_by_parChar_Pval_unadjusted))
colnames(DM_by_parChar_Pval_ADJ) <- c(colnames(DM_by_parChar_Pval_unadjusted))
library("miscTools") # for insertRow, used to insert row into Matrix
for (paramName in ParmNameVect) {
# add vector of adjusted p-values to matrix
adj <- p.adjust(DM_by_parChar_Pval_unadjusted[paramName,], "BH", n = length(DM_by_parChar_Pval_unadjusted))
DM_by_parChar_Pval_ADJ[paramName,] <- adj
}
# Print dataframe of statistics
round(DM_by_parChar_estimates, 2)
# Print dataframe of UNadjusted p-values
round(DM_by_parChar_Pval_unadjusted, digits = 4)
# Print matrix of adjusted p-values
round(DM_by_parChar_Pval_ADJ, digits = 4)
ParmNameVect <- c("A_mean", "alpha_mean", "lambda_mean", "epP_mean", "epN_mean", "K_mean", "w_mean", "cons_mean", "WS_nonetloss","LS_netloss","netscore")
cat_table = data.frame(matrix(nrow = 8, ncol = 11))
colnames(cat_table) <- c(ParmNameVect)
rownames(cat_table) <- c("Male","Female","MatEd_1","MatEd_2","MatEd_3","Income_1","Income_2","Income_3")
for (paramName in ParmNameVect) {
Med_Male <- format(round(median(HDT_plus[,paramName][HDT_plus$Child_Sex==0]), digits = 2), nsmall =2)
IQR_Male <- format(round(IQR(HDT_plus[,paramName][HDT_plus$Child_Sex==0]), digits = 2), nsmall =2)
Med_Female <- format(round(median(HDT_plus[,paramName][HDT_plus$Child_Sex==1]), digits = 2), nsmall =2)
IQR_Female <- format(round(IQR(HDT_plus[,paramName][HDT_plus$Child_Sex==1]), digits = 2), nsmall =2)
Male <- paste(Med_Male, " ","(", IQR_Male, ")",sep='')
Female <- paste(Med_Female," ","(", IQR_Female, ")",sep='')
# add to dataframe
cat_table["Male",paramName] <- Male
cat_table["Female",paramName] <- Female
# calculate by MatEd
Med_Ed1 <- format(round(median(HDT_plus[,paramName][HDT_plus$Mom_edu_recode==1]), digits = 2), nsmall =2)
IQR_Ed1 <- format(round(IQR(HDT_plus[,paramName][HDT_plus$Mom_edu_recode==1]), digits = 2), nsmall =2)
Med_Ed2 <- format(round(median(HDT_plus[,paramName][HDT_plus$Mom_edu_recode==2]), digits = 2), nsmall =2)
IQR_Ed2 <- format(round(IQR(HDT_plus[,paramName][HDT_plus$Mom_edu_recode==2]), digits = 2), nsmall =2)
Med_Ed3 <- format(round(median(HDT_plus[,paramName][HDT_plus$Mom_edu_recode==3]), digits = 2), nsmall =2)
IQR_Ed3 <- format(round(IQR(HDT_plus[,paramName][HDT_plus$Mom_edu_recode==3]), digits = 2), nsmall =2)
Ed1 <- paste(Med_Ed1, " ","(", IQR_Ed1, ")",sep='')
Ed2 <- paste(Med_Ed2," ","(", IQR_Ed2, ")",sep='')
Ed3 <- paste(Med_Ed3," ","(", IQR_Ed3, ")",sep='')
###d[[1]][1]
# add to dataframe
cat_table["MatEd_1",paramName] <- Ed1
cat_table["MatEd_2",paramName] <- Ed2
cat_table["MatEd_3",paramName] <- Ed3
# calculate by Income
Med_Inc1 <- format(round(median(HDT_plus[,paramName][HDT_plus$Income2==1], na.rm = T), digits = 2), nsmall =2)
IQR_Inc1 <- format(round(IQR(HDT_plus[,paramName][HDT_plus$Income2==1], na.rm = T), digits = 2), nsmall =2)
Med_Inc2 <- format(round(median(HDT_plus[,paramName][HDT_plus$Income2==2], na.rm = T), digits = 2), nsmall =2)
IQR_Inc2 <- format(round(IQR(HDT_plus[,paramName][HDT_plus$Income2==2], na.rm = T), digits = 2), nsmall =2)
Med_Inc3 <- format(round(median(HDT_plus[,paramName][HDT_plus$Income2==3], na.rm = T), digits = 2), nsmall =2)
IQR_Inc3 <- format(round(IQR(HDT_plus[,paramName][HDT_plus$Income2==3], na.rm = T), digits = 2), nsmall =2)
Inc1 <- paste(Med_Inc1, " ","(", IQR_Inc1, ")",sep='')
Inc2 <- paste(Med_Inc2," ","(", IQR_Inc2, ")",sep='')
Inc3 <- paste(Med_Inc3," ","(", IQR_Inc3, ")",sep='')
# add to dataframe
cat_table["Income_1",paramName] <- Inc1
cat_table["Income_2",paramName] <- Inc2
cat_table["Income_3",paramName] <- Inc3
}
cat_table
#scale, with default settings, will calculate the mean and standard deviation of the entire vector, then "scale" each element by those values by subtracting the mean and dividing by the sd.
# output of scale function shows scaled:center (mean) and scaled:scale (sd)
HDT_plus$Ep_scale <- scale(HDT_plus$epP_mean)
HDT_plus$En_scale <- scale(HDT_plus$epN_mean)
HDT_plus$k_scale <- scale(HDT_plus$K_mean)
HDT_plus$A_scale <- scale(HDT_plus$A_mean)
HDT_plus$alpha_scale <- scale(HDT_plus$alpha_mean)
HDT_plus$log_lambda_scale = scale(log(HDT_plus$lambda_mean))
HDT_plus$SLTM_cal_d100 <- HDT_plus$VB_SLTM_Total_Cal_Eaten/100
HDT_plus$Buffet_cal_d100 <- HDT_plus$VC_Buffet_Total_Cal_Eaten/100
HDT_plus$EAH_cal_d100 <- HDT_plus$VB_EAH_Total_Cal_Eaten/100
#install.packages("lavaan")
library(lavaan)
####### SLTM #######
SLTM_P_pathanalysis.model <-'
# structural model for Y
SLTM_cal_d100 ~ a*Ep_scale + b*k_scale + c*k_scale:Ep_scale
Child_BMI_zscore ~ d*SLTM_cal_d100
'
SLTM_P <- sem(SLTM_P_pathanalysis.model, data = HDT_plus, estimator = "MLM")
SLTM_P_summary <- summary(SLTM_P, fit.measures = T, rsquare=TRUE)
####### EAH ########
EAH_P_pathanalysis.model <-'
# structural model for Y
EAH_cal_d100 ~ a*Ep_scale + b*k_scale + c*En_scale + d*k_scale:Ep_scale + e*k_scale:En_scale
Child_BMI_zscore ~ f*EAH_cal_d100
'
EAH_P <- sem(EAH_P_pathanalysis.model, data = HDT_plus, estimator = "MLM")
EAH_P_summary <- summary(EAH_P, fit.measures = T, rsquare=TRUE)
######## Buffet ########
Buffet_P_pathanalysis.model <-'
# structural model for Y
Buffet_cal_d100 ~ a*Ep_scale + b*k_scale + c*k_scale:Ep_scale + d*En_scale + e*k_scale:En_scale
Child_BMI_zscore ~ f*Buffet_cal_d100
'
buffet_P <- sem(Buffet_P_pathanalysis.model, data = HDT_plus, estimator = "MLM")
buffet_P_summary <- summary(buffet_P, fit.measures = T, rsquare=TRUE)
#install.packages("lavaan")
library(lavaan)
####### SLTM #######
# Final model: Interaction between k/ep does not predict intake. do not include
SLTM_P_pathanalysis.model_final <-'
# structural model for Y
SLTM_cal_d100 ~ a*Ep_scale + b*k_scale
Child_BMI_zscore ~ c*SLTM_cal_d100
Ep_ind := a*c
k_ind := b*c
'
SLTM_P_final <- sem(SLTM_P_pathanalysis.model_final, data = HDT_plus, estimator = "MLM")
SLTM_P_final_summary <- summary(SLTM_P_final, fit.measures = T, rsquare=TRUE)
####### EAH ########
# Final model: only interaction between k and en predict intake, leave out k*ep
EAH_P_pathanalysis.model_final <-'
# structural model for Y
EAH_cal_d100 ~ a*Ep_scale + b*k_scale + c*En_scale + d*k_scale:En_scale
Child_BMI_zscore ~ f*EAH_cal_d100
Ep_ind := a*f
k_ind := b*f
En_ind := c*f
EnK_ind := d*f
'
EAH_P_pathanalysis.model_final <-'
# structural model for Y
EAH_cal_d100 ~ a*Ep_scale + b*k_scale + c*En_scale + d*k_scale:En_scale
Child_BMI_zscore ~ f*EAH_cal_d100
'
EAH_P_final <- sem(EAH_P_pathanalysis.model_final, data = HDT_plus, estimator = "MLM")
EAH_P_final_summary <- summary(EAH_P_final, fit.measures = T, rsquare=TRUE)
######## Buffet ########
# Final Model: interactions between k/ep, and  k/En do not predict intake. Do not include
Buffet_P_pathanalysis.model_final <-'
# structural model for Y
Buffet_cal_d100 ~ a*Ep_scale + b*k_scale + c*En_scale
Child_BMI_zscore ~ d*Buffet_cal_d100
Ep_ind := a*d
k_ind := b*d
En_ind := c*d
'
buffet_P_final <- sem(Buffet_P_pathanalysis.model_final, data = HDT_plus, estimator = "MLM")
buffet_P_final_summary <- summary(buffet_P_final, fit.measures = T, rsquare=TRUE)
####### SLTM #######
SLTM_E_pathanalysis.model <-'
# structural model for Y
SLTM_cal_d100 ~ a*A_scale + b*alpha_scale + c*A_scale:alpha_scale
Child_BMI_zscore ~ d*SLTM_cal_d100
'
SLTM_E <- sem(SLTM_E_pathanalysis.model, data = HDT_plus, estimator = "MLM")
SLTM_E_summary <- summary(SLTM_E, fit.measures = T, rsquare=TRUE)
####### EAH #######
EAH_E_pathanalysis.model <-'
# structural model for Y
EAH_cal_d100 ~ a*A_scale + b*alpha_scale + c*log_lambda_scale + d*A_scale:alpha_scale + e*A_scale:log_lambda_scale
Child_BMI_zscore ~ f*EAH_cal_d100
'
EAH_E <- sem(EAH_E_pathanalysis.model, data = HDT_plus, estimator = "MLM")
EAH_E_summary <- summary(EAH_E, fit.measures = T, rsquare=TRUE)
####### Buffet #######
Buffet_E_pathanalysis.model <-'
# structural model for Y
Buffet_cal_d100 ~ a*A_scale + b*alpha_scale + c*log_lambda_scale + d*A_scale:alpha_scale + e*A_scale:log_lambda_scale
Child_BMI_zscore ~ f*Buffet_cal_d100
'
buffet_E <- sem(Buffet_E_pathanalysis.model, data = HDT_plus, estimator = "MLM")
buffet_E_summary <- summary(buffet_E, fit.measures = T, rsquare=TRUE)
####### SLTM #######
# interaction between A and alpha does not predict intake. Leave commented out
SLTM_E_pathanalysis.model_final <-'
# structural model for Y
SLTM_cal_d100 ~ a*A_scale + b*alpha_scale
Child_BMI_zscore ~ c*SLTM_cal_d100
A_ind := a*c
alp_ind := b*c
'
SLTM_E_final <- sem(SLTM_E_pathanalysis.model_final, data = HDT_plus, estimator = "MLM")
SLTM_E_final_summary <- summary(SLTM_E_final, fit.measures = T, rsquare=TRUE)
####### EAH #######
# no interactions predict intake. comment out
EAH_E_pathanalysis.model_final <-'
# structural model for Y
EAH_cal_d100 ~ a*A_scale + b*alpha_scale + c*log_lambda_scale
Child_BMI_zscore ~ d*EAH_cal_d100
A_ind := a*d
alp_ind := b*d
lam_ind := c*d
'
EAH_E_final <- sem(EAH_E_pathanalysis.model_final, data = HDT_plus, estimator = "MLM")
EAH_E_final_summary <- summary(EAH_E_final, fit.measures = T, rsquare=TRUE)
####### Buffet #######
# interactions between A/alpha and A/lambda do not predict intake. Leave commented out
# Use logged version of lambda (log_lambda_scale) instead of Lambda_scale
Buffet_E_pathanalysis.model_final <-'
# structural model for Y
Buffet_cal_d100 ~ a*A_scale + b*alpha_scale + c*log_lambda_scale
Child_BMI_zscore ~ d*Buffet_cal_d100
A_ind := a*d
alp_ind := b*d
lam_ind := c*d
'
buffet_E_final <- sem(Buffet_E_pathanalysis.model_final, data = HDT_plus, estimator = "MLM")
buffet_E_final_summary <- summary(buffet_E_final, fit.measures = T, rsquare=TRUE)
# mean center age
HDT_plus$age_VB_c <- HDT_plus$age_VB - mean(HDT_plus$age_VB)
######## SLTM #######
### Perseveration ###
SLTM_P_pathanalysis.model_age <-'
# structural model for Y
SLTM_cal_d100 ~ a*Ep_scale + b*k_scale + c*age_VB_c
Child_BMI_zscore ~ d*SLTM_cal_d100
'
SLTM_P_age <- sem(SLTM_P_pathanalysis.model_age, data = HDT_plus, estimator = "MLM")
SLTM_P_age_summary <- summary(SLTM_P_age, fit.measures = T, rsquare=TRUE)
### Expected Value ###
SLTM_E_pathanalysis.model_age <-'
# structural model for Y
SLTM_cal_d100 ~ a*A_scale + b*alpha_scale + c*age_VB_c
Child_BMI_zscore ~ d*SLTM_cal_d100
'
SLTM_E_age <- sem(SLTM_E_pathanalysis.model_age, data = HDT_plus, estimator = "MLM")
SLTM_E_age_summary <- summary(SLTM_E_age, fit.measures = T, rsquare=TRUE)
####### EAH #######
### Perseveration ###
EAH_P_pathanalysis.model_age <-'
# structural model for Y
EAH_cal_d100 ~ a*Ep_scale + b*k_scale + c*En_scale + d*k_scale:En_scale + e*age_VB_c
Child_BMI_zscore ~ f*EAH_cal_d100
'
EAH_P_age <- sem(EAH_P_pathanalysis.model_age, data = HDT_plus, estimator = "MLM")
EAH_P_age_summary <- summary(EAH_P_age, fit.measures = T, rsquare=TRUE)
### Expectd value ###
EAH_E_pathanalysis.model_age <-'
# structural model for Y
EAH_cal_d100 ~ a*A_scale + b*alpha_scale + c*log_lambda_scale + d*age_VB_c
Child_BMI_zscore ~ f*EAH_cal_d100
'
EAH_E_age <- sem(EAH_E_pathanalysis.model_age, data = HDT_plus, estimator = "MLM")
EAH_E_age_summary <- summary(EAH_E_age, fit.measures = T, rsquare=TRUE)
####### Buffet #######
### Perseveration ###
Buffet_P_pathanalysis.model_age <-'
# structural model for Y
Buffet_cal_d100 ~ a*Ep_scale + b*k_scale + c*En_scale + d*age_VB_c
Child_BMI_zscore ~ e*Buffet_cal_d100
'
buffet_P_age <- sem(Buffet_P_pathanalysis.model_age, data = HDT_plus, estimator = "MLM")
buffet_P_age_summary <- summary(buffet_P_age, fit.measures = T, rsquare=TRUE)
### Expectd Value ###
Buffet_E_pathanalysis.model_age <-'
# structural model for Y
Buffet_cal_d100 ~ a*A_scale + b*alpha_scale + c*log_lambda_scale + d*age_VB
Child_BMI_zscore ~ e*Buffet_cal_d100
'
buffet_E_age <- sem(Buffet_E_pathanalysis.model_age, data = HDT_plus, estimator = "MLM")
buffet_E_age_summary <- summary(buffet_E_age, fit.measures = T, rsquare=TRUE)
####### SLTM ########
### Perseveration ###
SLTM_P_pathanalysis.model_FF <-'
# structural model for Y
SLTM_cal_d100 ~ a*Ep_scale + b*k_scale + c*VB_FF_pre_SLTM
Child_BMI_zscore ~ d*SLTM_cal_d100
ep_ind := a*d
k_ind := b*d
'
# fit the model
SLTM_P_ff <- sem(SLTM_P_pathanalysis.model_FF, data = HDT_plus, estimator = "MLM")
SLTM_P_ff_summary <- summary(SLTM_P_ff, fit.measures = T, rsquare=TRUE)
### Expected Value ###
SLTM_E_pathanalysis.model_FF <-'
# structural model for Y
SLTM_cal_d100 ~ a*A_scale + b*alpha_scale + c*VB_FF_pre_SLTM
Child_BMI_zscore ~ d*SLTM_cal_d100
A_ind := a*d
alpha_ind := b*d
'
# fit the model
SLTM_E_ff <- sem(SLTM_E_pathanalysis.model_FF, data = HDT_plus, estimator = "MLM")
SLTM_E_ff_summary <- summary(SLTM_E_ff, fit.measures = T, rsquare=TRUE)
####### EAH #######
### Perseveration ###
EAH_P_pathanalysis.model_FF <-'
# structural model for Y
EAH_cal_d100 ~ a*Ep_scale + b*k_scale + c*En_scale + d*k_scale:En_scale + e*VB_FF_pre_EAH
Child_BMI_zscore ~ f*EAH_cal_d100
'
# fit the model
EAH_P_ff <- sem(EAH_P_pathanalysis.model_FF, data = HDT_plus, estimator = "MLM")
EAH_P_ff_summary <- summary(EAH_P_ff, fit.measures = T, rsquare=TRUE)
### Expected value ###
EAH_E_pathanalysis.model_FF <-'
# structural model for Y
EAH_cal_d100 ~ a*A_scale + b*alpha_scale + c*log_lambda_scale + d*VB_FF_pre_EAH
Child_BMI_zscore ~ f*EAH_cal_d100
'
# fit the model
EAH_E_ff <- sem(EAH_E_pathanalysis.model_FF, data = HDT_plus, estimator = "MLM")
EAH_E_ff_summary <- summary(EAH_E_ff, fit.measures = T, rsquare=TRUE)
####### Buffet #######
### Perseveration ###
Buffet_P_pathanalysis.model_FF <-'
# structural model for Y
Buffet_cal_d100 ~ a*Ep_scale + b*k_scale + c*En_scale + d*VC_FF_pre_Buffet
Child_BMI_zscore ~ e*Buffet_cal_d100
'
# fit the model
buffet_P_ff <- sem(Buffet_P_pathanalysis.model_FF, data = HDT_plus, estimator = "MLM")
buffet_P_ff_summary <- summary(buffet_P_ff, fit.measures = T, rsquare=TRUE)
### Expected Value ###
Buffet_E_pathanalysis.model_FF <-'
# structural model for Y
Buffet_cal_d100 ~ a*A_scale + b*alpha_scale + c*log_lambda_scale + d*VC_FF_pre_Buffet
Child_BMI_zscore ~ e*Buffet_cal_d100
'
# fit the model
buffet_E_ff <- sem(Buffet_E_pathanalysis.model_FF, data = HDT_plus, estimator = "MLM")
buffet_E_ff_summary <- summary(buffet_E_ff, fit.measures = T, rsquare=TRUE)
#### Create reduced dataframes based on the following notes ####
# Subj 125, 132, 168: Did not comply with parts of protocol (e.g., did not fast for 3 hr before visit  )
# Subj 142: Attentional issues during HDT: “First part of HDT wasn’t look at the screen, and was randomly picking doors”
# Subj 145:	Attentional issues during HDT: "Kept talking during HDT – tried keeping him focused""
# Subj 160: Attentional issues during HDT: "Complained and talked a lot during HDT"
HDT_reduced = HDT_plus[!(HDT_plus$subjID == "125" | HDT_plus$subjID == "132" | HDT_plus$subjID == "142" | HDT_plus$subjID == "145" | HDT_plus$subjID == "160" | HDT_plus$subjID == "168"),]
####### SLTM ########
### Perseveration ###
SLTM_P_pathanalysis.model_red <-'
# structural model for Y
SLTM_cal_d100 ~ a*Ep_scale + b*k_scale
Child_BMI_zscore ~ c*SLTM_cal_d100
'
# fit the model
SLTM_P_red <- sem(SLTM_P_pathanalysis.model_red, data = HDT_reduced, estimator = "MLM")
SLTM_P_red_summary <- summary(SLTM_P_red, fit.measures = T, rsquare=TRUE)
### Expected Value ###
SLTM_E_pathanalysis.model_red <-'
# structural model for Y
SLTM_cal_d100 ~ a*A_scale + b*alpha_scale
Child_BMI_zscore ~ c*SLTM_cal_d100
'
# fit the model
SLTM_E_red <- sem(SLTM_E_pathanalysis.model_red, data = HDT_reduced, estimator = "MLM")
SLTM_E_red_summary <- summary(SLTM_E_red, fit.measures = T, rsquare=TRUE)
####### EAH #######
### Perseveration ###
EAH_P_pathanalysis.model_red <-'
# structural model for Y
EAH_cal_d100 ~ a*Ep_scale + b*k_scale + c*En_scale + d*k_scale:En_scale
Child_BMI_zscore ~ f*EAH_cal_d100
'
# fit the model
EAH_P_red <- sem(EAH_P_pathanalysis.model_red, data = HDT_reduced, estimator = "MLM")
EAH_P_red_summary <- summary(EAH_P_red, fit.measures = T, rsquare=TRUE)
### Expectd value ###
EAH_E_pathanalysis.model_red <-'
# structural model for Y
EAH_cal_d100 ~ a*A_scale + b*alpha_scale + c*log_lambda_scale
Child_BMI_zscore ~ f*EAH_cal_d100
'
# fit the model
EAH_E_red <- sem(EAH_E_pathanalysis.model_red, data = HDT_reduced, estimator = "MLM")
EAH_E_red_summary <- summary(EAH_E_red, fit.measures = T, rsquare=TRUE)
####### Buffet #######
### Perseveration ###
Buffet_P_pathanalysis.model_red <-'
# structural model for Y
Buffet_cal_d100 ~ a*Ep_scale + b*k_scale + c*En_scale
Child_BMI_zscore ~ g*Buffet_cal_d100
'
# fit the model
buffet_P_red <- sem(Buffet_P_pathanalysis.model_red, data = HDT_reduced, estimator = "MLM")
buffet_P_red_summary <- summary(buffet_P_red, fit.measures = T, rsquare=TRUE)
### Expected Value ###
Buffet_E_pathanalysis.model_red <-'
# structural model for Y
Buffet_cal_d100 ~ a*A_scale + b*alpha_scale + c*log_lambda_scale
Child_BMI_zscore ~ e*Buffet_cal_d100
'
# fit the model
buffet_E_red <- sem(Buffet_E_pathanalysis.model_red, data = HDT_reduced, estimator = "MLM")
buffet_E_red_summary <- summary(buffet_E_red, fit.measures = T, rsquare=TRUE)
#### Make reduced dataframe using 75% threshold ####
HDT_plus_EAH.75 <- HDT_plus[HDT_plus$VB_FF_pre_EAH >= 112,] #Fullness >= 75%
# Assess size of the reduced sample
length(HDT_plus_EAH.75$VB_FF_pre_EAH) #N = 57
#### Perseveration ####
EAH_P_pathanalysis.model_EAH75 <-'
# structural model for Y
EAH_cal_d100 ~ a*Ep_scale + b*k_scale + c*En_scale + d*k_scale:En_scale
Child_BMI_zscore ~ f*EAH_cal_d100
'
EAH_P_EAH75 <- sem(EAH_P_pathanalysis.model_EAH75, data = HDT_plus_EAH.75, estimator = "MLM")
summary(EAH_P_EAH75, fit.measures = T, rsquare=TRUE)
#### Expectancy ####
EAH_E_pathanalysis.model_EAH75 <-'
# structural model for Y
EAH_cal_d100 ~ a*A_scale + b*alpha_scale + c*log_lambda_scale
Child_BMI_zscore ~ f*EAH_cal_d100
'
EAH_E_EAH75 <- sem(EAH_E_pathanalysis.model_EAH75, data = HDT_plus_EAH.75, estimator = "MLM")
summary(EAH_E_EAH75, fit.measures = T, rsquare=TRUE)
#List of models:
models <- c(SLTM_P, EAH_P, buffet_P, SLTM_E, EAH_E, buffet_E, SLTM_P_final, EAH_P_final, buffet_P_final, SLTM_E_final, EAH_E_final, buffet_E_final, SLTM_P_age, EAH_P_age, buffet_P_age, SLTM_E_age, EAH_E_age, buffet_E_age, SLTM_P_ff, EAH_P_ff, buffet_P_ff, SLTM_E_ff, EAH_E_ff, buffet_E_ff, SLTM_P_red, EAH_P_red, buffet_P_red, SLTM_E_red, EAH_E_red, buffet_E_red, EAH_P_EAH75, EAH_E_EAH75)
for (i in 1:32) {
# get model fit values
modFit <- fitMeasures(models[[i]], fit.measures = c("ntotal","npar","df.scaled","chisq.scaled","pvalue.scaled","cfi.scaled","cfi.robust","srmr","rmsea.robust","aic","bic2"), baseline.model = NULL, output = "vector")
#get name of model
name <- models[[i]]@call[["model"]]
print(name)
print(modFit)
}
for (i in 1:32) {
# print estimates
name <- models[[i]]@call[["model"]]
print(name)
print(fitMeasures(models[[i]], fit.measures = c("ntotal"), baseline.model = NULL, output = "vector"))
print(parameterEstimates(models[[i]], rsquare = T))
}
# summary function prints 3 decimals places. Display more decimal places with function below... shows P-value for En*k interaction is <0.001 (0.001 rounded)
parameterEstimates(EAH_P_final)$pvalue
summary(SLTM_P, rsquare = T)
coplot(VB_EAH_Total_Cal_Eaten~En_scale|k_scale, row = 1, number = 3, overlap = 0.5, xlab = c("The Impact of Loss on Perseveration (En)", "Perseveration Decay (k)"), ylab = "EAH intake (kcal)", panel=function(x,y,...) {
points(x,y,pch = 20)
abline(lm(y ~ x), col="blue") }, data = HDT_plus)
coplot(VB_EAH_Total_Cal_Eaten~epN_mean|K_mean, row = 1, number = 3, overlap = 0.5, xlab = c("The Impact of Loss on Perseveration (En)", "Perseveration Decay (k)"), ylab = "EAH intake (kcal)", panel=function(x,y,...) {
points(x,y,pch = 20)
#panel.smooth(x,y,span=.8,iter=5,...)
abline(lm(y ~ x), col="blue") }, data = HDT_plus)
co.intervals(HDT_plus$K_mean, number = 3, overlap = 0.5)
co.intervals(HDT_plus$k_scale, number = 3, overlap = 0.5)
setwd("~/OneDrive - The Pennsylvania State University/b-childfoodlab_Shared/Inactive_Studies/DMK_Study/AB_reprocess/HDT/HDT-intake-git")
basedir <- "~/OneDrive - The Pennsylvania State University/b-childfoodlab_Shared/Inactive_Studies/DMK_Study/AB_reprocess/HDT/HDT-intake-git"
basedir <- "~/OneDrive - The Pennsylvania State University/b-childfoodlab_Shared/Inactive_Studies/DMK_Study/AB_reprocess/HDT/HDT-intake-git"
load(file.path(basedir,"Data/GeneratedDatabases/VPPKids2019-10-11.Rdata"))
#
source("postcalc.R")
basedir <- "~/OneDrive - The Pennsylvania State University/b-childfoodlab_Shared/Inactive_Studies/DMK_Study/AB_reprocess/HDT/HDT-intake-git"
setwd(file.path(basedir,"Scripts/"))
source("postcalc.R")
codaSamples = mcmc.list(lapply(1:ncol(fit), function(x) {
mcmc(as.array(fit)[,x, ])
}))
#install.packages("rjags")
library("rjags")
codaSamples = mcmc.list(lapply(1:ncol(fit), function(x) {
mcmc(as.array(fit)[,x, ])
}))
